local camera = require "orthographic.camera"

local DISPLAY_WIDTH = tonumber(sys.get_config("display.width"))
local DISPLAY_HEIGHT = tonumber(sys.get_config("display.height"))



function init(self)
	self.tile_pred = render.predicate({"tile"})
	self.gui_pred = render.predicate({"gui"})
	self.text_pred = render.predicate({"text"})
	self.particle_pred = render.predicate({"particle"})
	self.mask_pred = render.predicate({"screenfade"})

	self.clear_color = vmath.vector4(0, 0, 0, 0)
	self.clear_color.x = sys.get_config("render.clear_color_red", 0)
	self.clear_color.y = sys.get_config("render.clear_color_green", 0)
	self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
	self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)

	self.zoom = 0.5
	self.stencil_mask_enabled = true

	self.view = vmath.matrix4()
	self.projection = vmath.matrix4()

	
end

function update(self)
	render.set_depth_mask(true)
	render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})

	local window_width = render.get_window_width()
	local window_height = render.get_window_height()

	-- update window width/height for camera (used by the projections)
	camera.set_window_size(window_width, window_height)

	render.set_viewport(0, 0, window_width, window_height)
	render.set_view(self.view)

	render.set_depth_mask(false)
	render.disable_state(render.STATE_DEPTH_TEST)

	render.set_projection(self.projection)

	if self.stencil_mask_enabled then
		-- Using the simple trick from Sven's post here: https://forum.defold.com/t/making-a-flashlight/286/3
		-- 1. We need to disable color drawing while rendering the mask
		render.set_color_mask(false, false, false, false)

		-- 2. Enable stencil test and setup stencil mask parameters
		render.enable_state(render.STATE_STENCIL_TEST)
		render.set_stencil_func(render.COMPARE_FUNC_ALWAYS, 1, 255)
		render.set_stencil_op(render.STENCIL_OP_KEEP, render.STENCIL_OP_KEEP, render.STENCIL_OP_REPLACE)
		render.set_stencil_mask(255)

		-- 3. Draw the mask
		render.set_view(vmath.matrix4())
		render.set_projection(vmath.matrix4())
		render.draw(self.mask_pred)

		-- 4. Update the stencil function to only let pixel pass that are equal to the mask result
		render.set_stencil_func(render.COMPARE_FUNC_EQUAL, 1, 255)

		-- 5. Re-enable color drawing
		render.set_color_mask(true, true, true, true)
	end

	-- 6. Continue as rendering usual! :)
	render.enable_state(render.STATE_BLEND)
	render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
	render.disable_state(render.STATE_CULL_FACE)

	render.set_view(self.view)
	render.set_projection(self.projection)

	-- Render the scene
	render.draw(self.tile_pred)
	render.draw(self.particle_pred)
	render.draw_debug3d()

	render.set_view(vmath.matrix4())
	render.set_projection(vmath.matrix4_orthographic(0, window_width, 0, window_height, -1, 1))

	render.enable_state(render.STATE_STENCIL_TEST)
	render.draw(self.gui_pred)
	render.draw(self.text_pred)
	render.disable_state(render.STATE_STENCIL_TEST)

	render.set_depth_mask(false)
	render.draw_debug2d()
end


function on_message(self, message_id, message)
	if message_id == hash("clear_color") then
		self.clear_color = message.color
	elseif message_id == hash("set_view_projection") then
		self.view = message.view
		self.projection = message.projection
	end
end
