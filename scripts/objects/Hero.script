local fsm = require "scripts.statemachine"
local controller = require "scripts.controller"
local orthocamera = require "orthographic.camera"

local hero_id
local hero_pos = vmath.vector3()
local hero_size = vmath.vector3()
local v_down = vmath.vector3(0,-1, 0) 
local v_up = vmath.vector3(0, 1, 0) 
local v_right = vmath.vector3(1, 0, 0) 
local v_left = vmath.vector3(-1, 0, 0)
local _normal = vmath.vector3()

local is_grounded = false
local is_walking = false;
local is_from_bottom = false
local is_platform_from_bottom
local is_on_platform = false
local is_die = false
local is_platform_moving = false
local is_hit_by_enemy = false

local move_direction = -1
local prev_direction = -1

local old_velocity = vmath.vector3()
local acceleration = vmath.vector3(10, 0, 0)
local velocity = vmath.vector3(0, 0, 0)
local max_velocity = vmath.vector3(17, 15, 0)

local velocity_limit = 0

local _jump = hash("_JUMP")
local _move_left = hash("_MOVELEFT")
local _move_right = hash("_MOVERIGHT")
local delta
local query_result = {}

go.property("dummy", 0)

--[[ FSM STATES ]]--
local function set_state(self, event, from, to, eventmsg )
end

local function do_standing(self, event, from, to, eventmsg )
	is_walking = false
	velocity = vmath.vector3()
	is_grounded = true
	msg.post("#sprite", "play_animation", {id = hash("player-idle")})
end

local function stop_standing(self, event, from, to, eventmsg )

	is_platform_moving = false	
end

local function do_walking(self, event, from, to, eventmsg )	
	velocity = vmath.vector3()
	is_walking = true
	is_grounded = true
	sprite.set_hflip("#sprite", move_direction > 0)

	if prev_direction ~= move_direction then
		acceleration.x = acceleration.x * -1
		max_velocity.x = max_velocity.x * -1	
	end

	prev_direction = move_direction
	msg.post("#sprite", "play_animation", {id = hash("player-skip")})	
end

local function stop_walking(self, event, from, to, eventmsg )
end

local function do_jumping(self, event, from, to, eventmsg )

	controller.play_sfx("jump", 1)
	is_grounded = false	
	msg.post("#sprite", "play_animation", {id = hash("player-jump")})
end

local function do_falling(self, event, from, to, eventmsg )
	is_grounded = false	
	msg.post("#sprite", "play_animation", {id = hash("player-fall")})
end

--[[ INIT ]]--
function init(self)
	msg.post('.', 'acquire_input_focus')
	hero_pos = go.get_position()
	hero_size = go.get("#sprite", "size")
	hero_size.x = 5 -- tweak the hero width 

	-- setup fsm
	herofsm = fsm.create({
		events = {
			{
				name = "IDLE",
				from = {"none","walking","falling"},
				to = "standing"
			},
			{
				name = "WALK",
				from = {"standing","falling"},
				to = "walking"
			},
			{
				name = "FALL",
				from = {"jumping"},
				to = "falling"
			},
			{
				name = "JUMP",
				from = {"standing","walking"},
				to = "jumping"
			}
		},
		callbacks = {
			on_state_change = set_state,
			on_enter_standing = do_standing,
			on_leave_standing = stop_standing,
			on_leave_walking = stop_walking,
			on_enter_walking = do_walking,
			on_enter_jumping = do_jumping,
			on_enter_falling = do_falling,
		}
	})		

	msg.post("/stencil#ScreenFade","fade_in")
end

function final(self)
	-- Remove hero from tree
	daabbcc.removeAABB("World", hero_id)	
end

--[[ HIT SLUG ]]--
local function hit_enemy(enemy_id, _normal)	
	is_hit_by_enemy = true
	if _normal.x == 0 and _normal.y == -1 and  herofsm:is("falling") then
		controller.play_sfx("slug-die", 1)
		msg.post("camera", "shake", { intensity = 0.01, duration = 0.2, direction = "vertical" })

		local go_name = "/"..controller.world["enemys"][enemy_id]["name"]
		local go_pos  = go.get_position(go_name)

		msg.post(go_name, "enemy_death")
		controller.world["enemys"][enemy_id] = nil

	else 
		controller.play_sfx("hurt", 1)			
		msg.post("camera", "shake", { intensity = 0.01, duration = 0.1, direction = "both" })			
		velocity = vmath.vector3()	
		velocity = (velocity + v_up) - acceleration * (-2.2* (_normal.x * move_direction) ); 		
		controller.update_life()	

	end

end 

--[[ Collect Stars]]--
local function collectStar(star_id) 
	controller.update_collectable()
	controller.play_sfx("collect", 1)
	daabbcc.removeAABB("World",star_id)

	local go_name = "/"..controller.world["collectables"][star_id]["name"]
	local go_pos  = controller.world["collectables"][star_id]["position"]
	local go_sprite = controller.world["collectables"][star_id]["sprite"]
	local go_to = go_pos

	go_to.y= go_to.y+30
	controller.world["collectables"][star_id] = nil
	go.animate(go_name, "position", go.PLAYBACK_ONCE_FORWARD, go_to, go.EASING_INSINE, 0.4, 0,function() go.delete(go_name)end)
end

-- Fix hero possition with manifold result
local function fix_hero_position(mnormal,depth )
	_normal.x = mnormal.x
	_normal.y = mnormal.y

	if mnormal.y ~= 0 then
		hero_pos.y = hero_pos.y - (depth * mnormal.y)
	end

	if mnormal.x ~= 0 then
		hero_pos.x = hero_pos.x - (depth * mnormal.x)
	end
	
end

-- Kill the bunny
local function reload_start()
	is_die = true	
	controller.play_sfx("hero-die", 1)	
	go.animate("#sprite", "tint.w", go.PLAYBACK_ONCE_FORWARD, 0.0, go.EASING_LINEAR, 0.2)
	go.animate("#", "dummy", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR,0.4, 0)
	msg.post("/stencil#ScreenFade","fade_out")
end  

function update(self, dt)
	
	if is_die == true then
		return
	end 

	if (hero_pos.y < -380 or controller.life_count == 1) and is_die == false then
		reload_start()	
	end

	--[[ Movements]]--
	old_velocity = velocity; 
	velocity_limit = vmath.dot(velocity, max_velocity)
	
	if herofsm:is("walking") and velocity_limit < 200 and velocity_limit > -200 then 
		velocity.x = (velocity.x - move_direction) + acceleration.x * dt;    	
	end

	if herofsm:is("jumping") and velocity_limit < 450 and is_hit_by_enemy == false  then	
		velocity = (velocity + v_up) + acceleration * dt; 
	else 
		herofsm:FALL()
	end 

	if herofsm:is("falling") and is_on_platform == false and velocity_limit > -750 then
		velocity = (velocity + v_down) + acceleration * dt; 
	end

	if is_grounded == false and herofsm.current ~= "jumping" then 
		if herofsm.current ~= "falling"   then
			herofsm:JUMP()
			herofsm:FALL()
		end 
	end

	-- Update hero position
	hero_pos = hero_pos + (old_velocity + velocity) * 6.5 * dt; 

	-- Update hero position in tree
	daabbcc.updateRect("World",hero_id, hero_pos.x , hero_pos.y, hero_size.x, hero_size.y)

	-- Query the tree for possible collisions
	local query_result = daabbcc.queryID("World", hero_id)

	--[[ Check collisions ]]--
	if #query_result > 0 then
		
		for i = 1, #query_result do
			
			local result_id = query_result[i]

			--Check if collide with collectables
			if controller.world["collectables"][result_id] ~= nil then 
				collectStar(result_id )
				break	
			end

			-- Check collision manifold
			local count, depth, mnormal, contact_points = daabbcc.checkManifold("World", hero_id, result_id)	
			
			--Check if collide with enemy
			if controller.world["enemys"][result_id] ~= nil then 			
				hit_enemy(result_id,mnormal)
			end
			
			-- Check if collision start from bottom of the ground
			if mnormal.y == 1 and mnormal.x == 0 and controller.world["platforms"][result_id] == nil  then		
				is_from_bottom = true							
			end  

			-- Check if collision start from bottom of the platform
			if mnormal.y == 1 and mnormal.x == 0  then		
				is_platform_from_bottom = true						
			end

			--Check if collide with platform
			if controller.world["platforms"][result_id] ~= nil  then 	
				if mnormal.y == -1 and mnormal.x == 0 and herofsm.current ~= "jumping" and is_platform_from_bottom == false then	
					is_hit_by_enemy = false			
					is_on_platform = true			
					if is_walking == true then
						herofsm:WALK()
					else
						herofsm:IDLE()
					end
					
					local platform_position = go.get(controller.world["platforms"][result_id]["name"].."#Platform", "position")
					--local platform_direction = go.get(controller.world["platforms"][result_id]["name"].."#Platform", "direction")
					local platform_type = go.get(controller.world["platforms"][result_id]["name"].."#Platform", "horizantal")
					
					fix_hero_position(mnormal, depth)

					-- fake position	
					if platform_type then			
						hero_pos.y  = platform_position.y + (hero_size.y-9) 
					elseif herofsm.current ~= "walking" then
						if is_platform_moving == false then
							is_platform_moving = true	
							delta =  (hero_pos.x - platform_position.x) 
						end
						hero_pos.x = platform_position.x+delta
					end				
				else
					is_on_platform = false
					is_platform_from_bottom = true
					is_grounded = false
				end
			end -- Ground check end

			--Check if collide with ground
			if controller.world["grounds"][result_id] ~= nil then 		
				
				

				-- If hit the ground sides
				if (mnormal.x == -1 ) or (mnormal.x == 1 ) and is_from_bottom == false then		
					is_hit_by_enemy = true					
					--fix_hero_position(mnormal, depth)
					velocity.x = 0
					if is_on_platform ==false and herofsm.current ~= "jumping" then					
						velocity = (velocity + v_up) - vmath.vector3((10* mnormal.x), -0.5, 0)
					elseif herofsm.current ~= "jumping" then
						--if is on platform use different velocity			
						velocity = (velocity + v_up) - vmath.vector3((5* mnormal.x), -10, 0)
					end
				end

				-- Top of the ground
				if mnormal.y == -1 and mnormal.x == 0 and herofsm.current ~= "jumping" and is_grounded==false and is_from_bottom == false then	
					controller.play_sfx("drop", 0.3)
					is_hit_by_enemy = false					
					is_grounded = true 	
				if is_walking == true then
					herofsm:WALK()
				else
					herofsm:IDLE()
				end
					--Fix hero position
					fix_hero_position(mnormal, depth)
				end

			end -- Ground check end

		end -- for loop end 
	else -- else if there is no collision
	
	is_grounded = false
	is_from_bottom = false
	is_on_platform = false
	is_platform_from_bottom = false

	end
	-- set new position
	go.set_position(hero_pos)
	velocity_limit = vmath.vector3()
end

function on_message(self, message_id, message, sender)
	-- Initial setup
	if message_id== hash("set_hero") then 
		hero_id = daabbcc.insertRect("World", hero_pos.x, hero_pos.y, hero_size.x,hero_size.y)
		controller.hero_id = hero_id
	end
end

function on_input(self, action_id, action)

	if action_id == _jump and action.pressed  then			
		herofsm:JUMP()
	end

	if action_id == _jump and action.released then
		herofsm:FALL()
	end

	if action_id == _move_right and action.repeated and is_grounded == true   then		
		move_direction = -1
		herofsm:WALK() 		
	end 

	if action_id == _move_right and action.released    then   
		is_walking = false		
		if is_grounded == true then 
			herofsm:IDLE() 
		end 
	end

	if action_id == _move_left and action.repeated and is_grounded == true  then		
		move_direction = 1
		herofsm:WALK()	
	end 

	if action_id == _move_left and action.released    then
		is_walking = false
		if is_grounded == true then 
			herofsm:IDLE() 
		end 
	end
end






