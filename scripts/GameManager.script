local controller = require "scripts.controller"
local sysinfo = sys.get_sys_info()
go.property("ground_count", 9)
go.property("star_count", 15)

local hero_msg = msg.url("main", "/bunny", "Hero")
local camera = hash("/camera")
local colobox = hash("/colorbox")
local camera_pos_x = 0

local function insert_rects (_type, _count)
	local _pos = vmath.vector3()
	local _size = vmath.vector3()
	local _sprite_url = msg.url()
	local _name = ""
	for i = 1, _count do
		_name = _type..i
		_pos = go.get_position(_name)
		_sprite_url = msg.url(_name.."#sprite")
		_size = go.get(_sprite_url, "size")
		local id = controller.addRect("World",_pos, _size, _type, _name, _sprite_url )	
	end	
end

function init(self)
	msg.post('.', 'acquire_input_focus')
	msg.post("@render:", "clear_color", { color = vmath.vector4(75/255, 57/255, 22/255, 0) } )

	-- DEFOS
	if sysinfo.system_name == "Windows" or sysinfo.system_name == "Linux" or sysinfo.system_name == "Darwin" then
		-- defos.disable_maximize_button()
		-- defos.disable_minimize_button()
		-- defos.set_cursor_visible(false)
		-- defos.set_window_title("DAABBCC Example")
		-- defos.set_fullscreen(true)
	end

	controller.reset()	

	-- Create grounds and collectables
	insert_rects("ground", self.ground_count)
	insert_rects("collectable", self.star_count)

	-- Add Hero to the tree	
	msg.post(hero_msg, "set_hero")
	
	-- Play music
	--controller.play_sfx("music", 0.2)

	-- On Init rebuild optimal tree
	daabbcc.rebuildTree("World")

end

function update(self, dt)
	-- update sky position
	camera_pos_x = go.get_position(camera).x
	go.set(colobox, "position.x", camera_pos_x)

end

function on_input(self, action_id, action)
	if action_id == hash("_TOGGLEPROFILER") and action.pressed then		
		msg.post("@system:", "toggle_profile")
	end
	if action_id == hash("_EXIT") and action.pressed then		
		msg.post("@system:", "exit", {code = 0})
	end
end

function final(self)
	-- Clean up the tree and table	
	-- enemies removes themself 
	for k, v in pairs( controller.world["grounds"] ) do	
		daabbcc.removeAABB("World", v["treeID"])
	end

	for k, v in pairs( controller.world["collectables"] ) do	
		daabbcc.removeAABB("World", v["treeID"])
	end

	for k, v in pairs( controller.world["platforms"] ) do	
		daabbcc.removeAABB("World", v["treeID"])
	end

end

function on_message(self, message_id, message, sender)
	if message_id == hash("_reload") then 
		local proxy = msg.url("default", "/script", "Proxy")
		msg.post(proxy,"unload_level")
	end
end

